/********************************************
 * EXPORTS
 ********************************************/
export "targets" {
	value = discovery.relabel.pods_autoscrape.output
}

/********************************************
 * Discovery and Relabeling
 ********************************************/

discovery.kubernetes "pods" {
	role = "pod"
}

discovery.relabel "pods_autoscrape" {
	targets = discovery.kubernetes.pods.targets
	// only scrape ports with names ending in "metrics" or "prom" or "prometheus" 
	rule {
		action        = "keep"
		regex         = ".*metrics|.*prom|.*prometheus"
		source_labels = ["__meta_kubernetes_pod_container_port_name"]
	}
	// we need to find a usable application name from pod labels
	// this will be used in the job label
	// use (in-order) `name`, `app.kubernetes.io/name`, `k8s-app`, and `app` 
	rule {
		source_labels = ["__meta_kubernetes_pod_label_name"]
		target_label  = "__meta_name_label"
	}

	rule {
		source_labels = ["__meta_name_label", "__meta_kubernetes_pod_label_app_kubernetes_io_name"]
		target_label  = "__meta_name_label"
		regex         = ";(.+)"
	}

	rule {
		source_labels = ["__meta_name_label", "__meta_kubernetes_pod_label_k8s_app"]
		target_label  = "__meta_name_label"
		regex         = ";(.+)"
	}

	rule {
		source_labels = ["__meta_name_label", "__meta_kubernetes_pod_label_app"]
		target_label  = "__meta_name_label"
		regex         = ";(.+)"
	}
	// finally drop anything without any of the above labels
	rule {
		action        = "keep"
		source_labels = ["__meta_name_label"]
	}
	// drop non-running pods
	rule {
		action        = "drop"
		regex         = "Succeeded|Failed"
		source_labels = ["__meta_kubernetes_pod_phase"]
	}
	// drop any pod with annotation `prometheus.io/scrape: false`
	rule {
		action        = "drop"
		regex         = "false"
		source_labels = ["__meta_kubernetes_pod_annotation_prometheus_io_scrape"]
	}
	// replace scheme if pod has `prometheus.io/scheme: https`
	rule {
		action        = "replace"
		regex         = "(https?)"
		replacement   = "$1"
		source_labels = ["__meta_kubernetes_pod_annotation_prometheus_io_scheme"]
		target_label  = "__scheme__"
	}
	// if pod sets `prometheus.io/path`, use that as the metrics path
	rule {
		action        = "replace"
		regex         = "(.+)"
		replacement   = "$1"
		source_labels = ["__meta_kubernetes_pod_annotation_prometheus_io_path"]
		target_label  = "__metrics_path__"
	}
	// if pod specifies `prometheus.io/port`, use that instead of default
	rule {
		action        = "replace"
		regex         = "(.+?)(\\:\\d+)?;(\\d+)"
		replacement   = "$1:$3"
		source_labels = ["__address__", "__meta_kubernetes_pod_annotation_prometheus_io_port"]
		target_label  = "__address__"
	}

	rule {
		action      = "labelmap"
		regex       = "__meta_kubernetes_pod_annotation_prometheus_io_param_(.+)"
		replacement = "__param_$1"
	}

	rule {
		action = "labelmap"
		regex  = "__meta_kubernetes_pod_label_prometheus_io_label_(.+)"
	}

	rule {
		action = "labelmap"
		regex  = "__meta_kubernetes_pod_annotation_prometheus_io_label_(.+)"
	}
	// set job to namespace/ name label (as discovered above)
	rule {
		action        = "replace"
		replacement   = "$1"
		separator     = "/"
		source_labels = ["__meta_kubernetes_namespace", "__meta_name_label"]
		target_label  = "job"
	}
	// set namespace, pod, and container labels on resulting metrics
	rule {
		action        = "replace"
		source_labels = ["__meta_kubernetes_namespace"]
		target_label  = "namespace"
	}

	rule {
		action        = "replace"
		source_labels = ["__meta_kubernetes_pod_name"]
		target_label  = "pod"
	}

	rule {
		action        = "replace"
		source_labels = ["__meta_kubernetes_pod_container_name"]
		target_label  = "container"
	}
	// make sure we always have a unique instance label
	rule {
		action        = "replace"
		separator     = ":"
		source_labels = ["__meta_kubernetes_pod_name", "__meta_kubernetes_pod_container_name", "__meta_kubernetes_pod_container_port_name"]
		target_label  = "instance"
	}
}

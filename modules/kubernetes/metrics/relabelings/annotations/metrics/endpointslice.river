argument "targets" {
	// comment = "Discovered targets to apply relabelings to"
	optional = false
}

export "relabelings" {
	value = discovery.relabel.metric_annotations
}

discovery.relabel "metric_annotations" {
	targets = argument.targets.value

	// allow resources to declare their metrics scraped or not, the following annotations are supported:
	//   metrics.agent.grafana.com/scrape: false
	// or
	//   prometheus.io/scrape: true
	rule {
		action       = "replace"
		replacement  = "false"
		target_label = "__tmp_scrape"
	}

	rule {
		action        = "replace"
		source_labels = [
			"__meta_kubernetes_service_annotation_metrics_agent_grafana_com_scrape",
			"__meta_kubernetes_endpoints_annotation_metrics_agent_grafana_com_scrape",
			"__meta_kubernetes_service_annotation_prometheus_io_scrape",
			"__meta_kubernetes_endpoints_annotation_prometheus_io_scrape",
		]
		separator    = ";"
		regex        = "^(?:;*)?(true|false).*$"
		replacement  = "$1"
		target_label = "__tmp_scrape"
	}

	// allow resources to declare the protocol to use when collecting metrics, the default value is "http",
	// the following the following annotations are supported:
	//   metrics.agent.grafana.com/scheme: http
	// or
	//   prometheus.io/scheme: http
	rule {
		action       = "replace"
		replacement  = "http"
		target_label = "__tmp_scheme"
	}

	rule {
		action        = "replace"
		source_labels = [
			"__meta_kubernetes_service_annotation_metrics_agent_grafana_com_scheme",
			"__meta_kubernetes_endpoints_annotation_metrics_agent_grafana_com_scheme",
			"__meta_kubernetes_service_annotation_prometheus_io_scheme",
			"__meta_kubernetes_endpoints_annotation_prometheus_io_scheme",
		]
		separator    = ";"
		regex        = "^(?:;*)?(https?).*$"
		replacement  = "$1"
		target_label = "__tmp_scheme"
	}

	// allow resources to declare the port to use when collecting metrics, the default value is the discovered port from
	// service discovery, the following annotations are supported:
	//   metrics.agent.grafana.com/port: 9090
	// or
	//   prometheus.io/port: 9090
	rule {
		action        = "replace"
		source_labels = [
			"__meta_kubernetes_service_annotation_metrics_agent_grafana_com_port",
			"__meta_kubernetes_endpoints_annotation_metrics_agent_grafana_com_port",
			"__meta_kubernetes_service_annotation_prometheus_io_port",
			"__meta_kubernetes_endpoints_annotation_prometheus_io_port",
		]
		separator    = ";"
		regex        = "^(?:;*)?(\\d+).*$"
		replacement  = "$1"
		target_label = "__tmp_port"
	}

	// allow resources to declare their the path to use when collecting their metrics, the default value is "/metrics",
	// the following annotations are supported:
	//   metrics.agent.grafana.com/path: /metrics/foo
	// or
	//   prometheus.io/path: /bar/metrics
	rule {
		action       = "replace"
		replacement  = "/metrics"
		target_label = "__tmp_path"
	}

	rule {
		action        = "replace"
		source_labels = [
			"__meta_kubernetes_service_annotation_metrics_agent_grafana_com_path",
			"__meta_kubernetes_endpoints_annotation_metrics_agent_grafana_com_path",
			"__meta_kubernetes_service_annotation_prometheus_io_path",
			"__meta_kubernetes_endpoints_annotation_prometheus_io_path",
		]
		separator    = ";"
		regex        = "^(?:;*)?([^;]+).*$"
		replacement  = "$1"
		target_label = "__tmp_path"
	}

	// allow resources to declare their metrics the tenant their metrics should be sent to, the following annotation is supported:
	//   metrics.agent.grafana.com/tenant: primary
	//
	// Note: This does not necessarily have to be the actual tenantId, it can be a friendly name as well that is simply used
	//       to determine if the metrics should be gathered for the current tenant
	rule {
		action       = "replace"
		replacement  = ""
		target_label = "__tmp_tenant"
	}

	rule {
		action        = "replace"
		source_labels = [
			"__meta_kubernetes_service_annotation_metrics_agent_grafana_com_tenant",
			"__meta_kubernetes_endpoints_annotation_metrics_agent_grafana_com_tenant",
		]
		separator    = ";"
		regex        = "^(?:;*)?([^;]+).*$"
		replacement  = "$1"
		target_label = "__tmp_tenant"
	}

	// allow resources to declare how often their metrics should be collected, the default value is 1m,
	// the following annotations are supporte with the value provided in duration format:
	//   metrics.agent.grafana.com/interval: 5m
	// or
	//  prometheus.io/interval: 5m
	rule {
		action       = "replace"
		replacement  = "1m"
		target_label = "__tmp_interval"
	}

	rule {
		action        = "replace"
		source_labels = [
			"__meta_kubernetes_service_annotation_metrics_agent_grafana_com_interval",
			"__meta_kubernetes_endpoints_annotation_metrics_agent_grafana_com_interval",
			"__meta_kubernetes_service_annotation_prometheus_io_interval",
			"__meta_kubernetes_endpoints_annotation_prometheus_io_interval",
		]
		separator    = ";"
		regex        = "^(?:;*)?(\\d+(s|m|ms|h|d)).*$"
		replacement  = "$1"
		target_label = "__tmp_interval"
	}

	// allow resources to declare the timeout of the scrape request, the default value is 10s,
	// the following annotations are supporte with the value provided in duration format:
	//   metrics.agent.grafana.com/timeout: 30s
	// or
	//  prometheus.io/timeout: 10s
	rule {
		action       = "replace"
		replacement  = "1m"
		target_label = "__tmp_timeout"
	}

	rule {
		action        = "replace"
		source_labels = [
			"__meta_kubernetes_service_annotation_metrics_agent_grafana_com_timeout",
			"__meta_kubernetes_endpoints_annotation_metrics_agent_grafana_com_timeout",
			"__meta_kubernetes_service_annotation_prometheus_io_timeout",
			"__meta_kubernetes_endpoints_annotation_prometheus_io_timeout",
		]
		separator    = ";"
		regex        = "^(?:;*)?(\\d+(s|m|ms|h|d)).*$"
		replacement  = "$1"
		target_label = "__tmp_timeout"
	}

	// allow resources to declare their the job label value to use when collecting their metrics, the default value is "",
	// the following annotations are supported:
	//   metrics.agent.grafana.com/job: integrations/kubernetes/cadvisor
	// or
	//   prometheus.io/job: integrations/kubernetes/cadvisor
	rule {
		action       = "replace"
		replacement  = ""
		target_label = "__tmp_job"
	}

	rule {
		action        = "replace"
		source_labels = [
			"__meta_kubernetes_service_annotation_metrics_agent_grafana_com_job",
			"__meta_kubernetes_endpoints_annotation_metrics_agent_grafana_com_job",
			"__meta_kubernetes_service_annotation_prometheus_io_job",
			"__meta_kubernetes_endpoints_annotation_prometheus_io_job",
		]
		separator    = ";"
		regex        = "^(?:;*)?([^;]+).*$"
		replacement  = "$1"
		target_label = "__tmp_job"
	}
}

/*
Module: relabelings-kube-state-metrics
Description: Handles metric relabelings for collected metrics from kube-state-metrics
Docs: https://github.com/kubernetes/kube-state-metrics
*/
argument "forward_to" {
	optional = false
	// comment = "The module to forward the output to"
}

argument "job_label" {
	optional = true
	// from Grafana Cloud Integration:
	default = "integrations/kubernetes/kube-state-metrics"
	// comment = "The job label to add for all kube-state-metrics"
}

argument "pod_name" {
	optional = true
	default  = "kube-state-metrics"
	// comment = "The name of the pod associated with kube-state-metrics, this is just a partial name as .* is added before and after"
}

argument "keep_metrics" {
	optional = true
	// from Grafana Cloud Integration: kubelet_running_containers|go_goroutines|kubelet_runtime_operations_errors_total|cluster:namespace:pod_cpu:active:kube_pod_container_resource_limits|namespace_memory:kube_pod_container_resource_limits:sum|kubelet_volume_stats_inodes_used|kubelet_certificate_manager_server_ttl_seconds|namespace_workload_pod:kube_pod_owner:relabel|kubelet_node_config_error|kube_daemonset_status_number_misscheduled|kube_pod_container_resource_requests|namespace_cpu:kube_pod_container_resource_limits:sum|container_memory_working_set_bytes|container_fs_reads_bytes_total|kube_node_status_condition|namespace_cpu:kube_pod_container_resource_requests:sum|kubelet_server_expiration_renew_errors|container_fs_writes_total|kube_horizontalpodautoscaler_status_desired_replicas|node_filesystem_avail_bytes|kube_pod_status_reason|node_filesystem_size_bytes|kube_deployment_spec_replicas|kube_statefulset_metadata_generation|namespace_workload_pod|storage_operation_duration_seconds_count|kubelet_certificate_manager_client_expiration_renew_errors|kube_pod_container_resource_limits|kube_statefulset_status_replicas_updated|node_namespace_pod_container:container_memory_rss|kube_statefulset_status_observed_generation|node_namespace_pod_container:container_cpu_usage_seconds_total:sum_irate|kubelet_pleg_relist_interval_seconds_bucket|kube_job_status_start_time|kube_deployment_status_observed_generation|kubelet_pod_worker_duration_seconds_bucket|container_memory_cache|kube_resourcequota|kube_horizontalpodautoscaler_spec_min_replicas|namespace_memory:kube_pod_container_resource_requests:sum|kube_persistentvolumeclaim_resource_requests_storage_bytes|kube_daemonset_status_number_available|kube_job_failed|storage_operation_errors_total|cluster:namespace:pod_memory:active:kube_pod_container_resource_limits|container_fs_writes_bytes_total|kube_statefulset_replicas|kube_replicaset_owner|container_network_receive_bytes_total|volume_manager_total_volumes|kube_horizontalpodautoscaler_spec_max_replicas|kube_daemonset_status_desired_number_scheduled|kube_pod_container_status_waiting_reason|process_cpu_seconds_total|kube_node_status_allocatable|kube_deployment_status_replicas_available|kube_daemonset_status_updated_number_scheduled|container_network_receive_packets_total|container_memory_rss|container_cpu_usage_seconds_total|kube_namespace_status_phase|cluster:namespace:pod_memory:active:kube_pod_container_resource_requests|kubelet_volume_stats_available_bytes|kube_deployment_status_replicas_updated|kubelet_running_container_count|kube_node_info|container_network_transmit_packets_dropped_total|kubelet_certificate_manager_client_ttl_seconds|kube_pod_owner|kubelet_volume_stats_inodes|kubelet_runtime_operations_total|container_cpu_cfs_throttled_periods_total|kubelet_cgroup_manager_duration_seconds_bucket|kubelet_running_pod_count|container_network_transmit_packets_total|kubelet_node_name|kube_daemonset_status_current_number_scheduled|kube_statefulset_status_replicas_ready|cluster:namespace:pod_cpu:active:kube_pod_container_resource_requests|kubelet_volume_stats_capacity_bytes|kube_horizontalpodautoscaler_status_current_replicas|node_quantile:kubelet_pleg_relist_duration_seconds:histogram_quantile|kube_node_spec_taint|kubelet_pleg_relist_duration_seconds_bucket|kube_pod_status_phase|container_cpu_cfs_periods_total|kube_deployment_metadata_generation|node_namespace_pod_container:container_memory_cache|kube_statefulset_status_current_revision|kubelet_pleg_relist_duration_seconds_count|container_fs_reads_total|kube_statefulset_status_update_revision|container_network_receive_packets_dropped_total|kube_pod_info|kubelet_running_pods|process_resident_memory_bytes|kubelet_pod_worker_duration_seconds_count|kubelet_pod_start_duration_seconds_count|kubelet_cgroup_manager_duration_seconds_count|kube_node_status_capacity|container_network_transmit_bytes_total|rest_client_requests_total|kubernetes_build_info|machine_memory_bytes|kube_statefulset_status_replicas|container_memory_swap|kube_job_status_active|kubelet_pod_start_duration_seconds_bucket|node_namespace_pod_container:container_memory_working_set_bytes|node_namespace_pod_container:container_memory_swap|kube_namespace_status_phase|container_cpu_usage_seconds_total|kube_pod_status_phase|kube_pod_start_time|kube_pod_container_status_restarts_total|kube_pod_container_info|kube_pod_container_status_waiting_reason|kube_daemonset.*|kube_replicaset.*|kube_statefulset.*|kube_job.*|kube_node.*|node_namespace_pod_container:container_cpu_usage_seconds_total:sum_irate|cluster:namespace:pod_cpu:active:kube_pod_container_resource_requests|namespace_cpu:kube_pod_container_resource_requests:sum|node_cpu.*|node_memory.*|node_filesystem.*|node_network_transmit_bytes_total
	// the default is the same, however any values with a ":" were removed as those are the result of recording rules and actually output by kube-state-metrics, and are sorted alphabetically
	default = "(container_cpu_cfs_periods_total|container_cpu_cfs_throttled_periods_total|container_cpu_usage_seconds_total|container_cpu_usage_seconds_total|container_fs_reads_bytes_total|container_fs_reads_total|container_fs_writes_bytes_total|container_fs_writes_total|container_memory_cache|container_memory_rss|container_memory_swap|container_memory_working_set_bytes|container_network_receive_bytes_total|container_network_receive_packets_total|container_network_transmit_bytes_total|container_network_transmit_packets_dropped_total|go_goroutines|kube_daemonset.*|kube_daemonset_status_current_number_scheduled|kube_daemonset_status_desired_number_scheduled|kube_daemonset_status_number_available|kube_daemonset_status_number_misscheduled|kube_daemonset_status_updated_number_scheduled|kube_deployment_metadata_generation|kube_deployment_spec_replicas|kube_deployment_status_replicas_available|kube_deployment_status_replicas_updated|kube_horizontalpodautoscaler_spec_max_replicas|kube_horizontalpodautoscaler_spec_min_replicas|kube_horizontalpodautoscaler_status_current_replicas|kube_horizontalpodautoscaler_status_desired_replicas|kube_job.*|kube_job_failed|kube_job_status_active|kube_job_status_start_time|kube_node.*|kube_node_info|kube_node_spec_taint|kube_node_status_allocatable|kube_node_status_capacity|kube_node_status_condition|kube_namespace_status_phase|kube_namespace_status_phase|kube_pod_container_info|kube_pod_container_resource_limits|kube_pod_container_resource_requests|kube_pod_container_status_restarts_total|kube_pod_container_status_waiting_reason|kube_pod_container_status_waiting_reason|kube_pod_info|kube_pod_owner|kube_pod_start_time|kube_pod_status_phase|kube_pod_status_phase|kube_pod_status_phase|kube_pod_status_reason|kube_replicaset.*|kube_resourcequota|kube_statefulset.*|kubernetes_build_info|kubelet_certificate_manager_client_expiration_renew_errors|kubelet_certificate_manager_client_ttl_seconds|kubelet_certificate_manager_server_ttl_seconds|kubelet_cgroup_manager_duration_seconds_bucket|kubelet_cgroup_manager_duration_seconds_count|kubelet_node_config_error|kubelet_node_name|kubelet_pleg_relist_duration_seconds_bucket|kubelet_pleg_relist_duration_seconds_count|kubelet_pod_start_duration_seconds_bucket|kubelet_pod_start_duration_seconds_count|kubelet_pod_worker_duration_seconds_count|kubelet_running_container_count|kubelet_running_containers|kubelet_running_pod_count|kubelet_running_pods|kubelet_server_expiration_renew_errors|kubelet_volume_stats_available_bytes|kubelet_volume_stats_capacity_bytes|kubelet_volume_stats_inodes|kubelet_volume_stats_inodes_used|kubelet_runtime_operations_errors_total|kubelet_runtime_operations_total|machine_memory_bytes|node_cpu.*|node_filesystem.*|node_filesystem_avail_bytes|node_filesystem_size_bytes|node_memory.*|node_network_transmit_bytes_total|process_cpu_seconds_total|process_resident_memory_bytes|rest_client_requests_total|storage_operation_duration_seconds_count|storage_operation_errors_total|volume_manager_total_volumes|kube_persistentvolumeclaim_resource_requests_storage_bytes)"
	// comment = "Regex of metrics to keep"
}

export "metric_relabelings" {
	value = prometheus.relabel.kube_state_metrics
}

prometheus.relabel "kube_state_metrics" {
	forward_to = argument.forward_to.value

	// kube-state-metrics typically expects the following labels to be present:
	// - exported_namespace
	// - exported_instance
	// - exported_pod
	// - exported_container
	//
	// to be present, the exported_ is a prefix added when there are label collisions, meaning the metrics returned
	// have labels that already exist.  This all works, except for container, if using Service Discovery endpoint/pod
	// and the pod has multiple containers that expose ports this can result in potentially duplicate scrape jobs,
	// which would lead to duplicate metrics.  The configuration is to typically not keep a "container" label, as it
	// can cause duplicate scrapes and incorrect metric calculations for instances where a pod has multiple containers
	// and multiple ports even if a single port should be scraped.  However, for opencost dashboards/rules to work correctly,
	// this should be added, since it is not auto-generated and the container label returned from opencost is just "container"
	// we need to copy it
	rule {
		action        = "replace"
		source_labels = ["container"]
		regex         = "(.+)"
		replacement   = "$1"
		target_label  = "exported_container"
	}

	// due to the fact it is easier to perform a keep and maintain a whitelist, we have to take a
	// multi-step approach since the metrics could be coming from any job, not just kube-state-metrics:
	//
	// 1st apply a keep regex, changing the name of the metric to be preceded by __
	// 2nd drop anything matching kube-state-metrics where the metric name starts with a alpha character
	// 3rd remove the temp __ added in the 1st step

	// add temp __ to metrics we want to keep
	rule {
		action        = "replace"
		source_labels = [
			"pod",
			"__name__",
		]
		separator    = ";"
		regex        = "(?i)^.*" + argument.pod_name.value + ".*;" + argument.keep_metrics.value
		replacement  = "__$1"
		target_label = "__name__"
	}

	// remove any metric from kube-state-metrics that does not start with __
	rule {
		action        = "drop"
		source_labels = [
			"pod",
			"__name__",
		]
		separator = ";"
		regex     = "(?i)^.*" + argument.pod_name.value + ".*;[a-z]+.+"
	}

	// remove the __ from any remaining kube-state-metrics
	rule {
		action        = "replace"
		source_labels = [
			"pod",
			"__name__",
		]
		separator    = ";"
		regex        = "(?i)^.*" + argument.pod_name.value + ".*;__(.+)"
		replacement  = "$1"
		target_label = "__name__"
	}

	// set the job label, only if job is not specified or contains "module.", the value of the annotation
	// metrics.agent.grafana.com/job takes precedence
	rule {
		action        = "replace"
		source_labels = [
			"pod",
			"job",
		]
		separator    = ";"
		regex        = "(?i)^.*" + argument.pod_name.value + "[^;]*;(.*module\\..*|)$"
		replacement  = argument.job_label.value
		target_label = "job"
	}
}

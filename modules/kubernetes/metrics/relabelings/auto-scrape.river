/*
Module: relabelings-auto-scrape
Description: Handles metric relabelings for collected metrics from auto-scraped targets via annotations
*/
argument "forward_to" {
	// comment = "The module to forward the output to"
	optional = false
}

argument "job_label" {
	optional = true
	default  = "auto-scrape"
	// comment = "The default job label to add"
}

export "metric_relabelings" {
	value = prometheus.relabel.auto_scrape
}

prometheus.relabel "auto_scrape" {
	forward_to = argument.forward_to.value

	// set the job label, only if job is not specified or contains "module.", the value of the annotation
	// metrics.agent.grafana.com/job or prometheus.io/job takes precedence
	rule {
		action        = "replace"
		source_labels = ["job"]
		separator     = ";"
		regex         = "(?i)^(.*module\\..*|)$"
		replacement   = argument.job_label.value
		target_label  = "job"
	}

	// set the job label, only if job is the default job_label and the label app.kubernetes.io/name exists
	// on the service, endpoint or pod, set the value to ${namespace}/${name}
	rule {
		action        = "replace"
		source_labels = [
			"job",
			"namespace",
			"app",
		]
		separator    = ";"
		regex        = "^" + argument.job_label.value + ";([^;]+);(.+)$"
		replacement  = "$1/$2"
		target_label = "job"
	}

	// set the instance label to the name of the pod that was scraped, there are many dashboards and rules that rely on the
	// instance label being present as it is automatically assigned to the scraped target if not set.  However, we don't
	// want to create high-cardinality unnecessairly, so it does not make sense to have it be the worker node the pod is on.
	rule {
		action        = "replace"
		source_labels = ["pod"]
		regex         = "(.+)"
		target_label  = "instance"
	}
}

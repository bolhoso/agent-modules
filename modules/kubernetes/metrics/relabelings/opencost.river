/*
Module: relabelings-opencost
Description: Handles metric relabelings for collected metrics from opencost
Docs: https://github.com/opencost/opencost
*/
argument "forward_to" {
	optional = false
	// comment = "The module to forward the output to"
}

argument "job_label" {
	optional = true
	// from Grafana Cloud Integration:
	default = "integrations/kubernetes/opencost"
	// comment = "The job label to add for all opencost"
}

argument "pod_name" {
	optional = true
	default  = "opencost"
	// comment = "The name of the pod associated with opencost, this is just a partial name as .* is added before and after"
}

argument "keep_metrics" {
	optional = true
	default  = "(.*)"
	// comment = "Regex of metrics to keep"
}

export "metric_relabelings" {
	value = prometheus.relabel.opencost
}

prometheus.relabel "opencost" {
	forward_to = argument.forward_to.value

	// opencost typically expects the following labels to be present:
	// - exported_namespace
	// - exported_instance
	// - exported_pod
	// - exported_container
	//
	// to be present, the exported_ is a prefix added when there are label collisions, meaning the metrics returned
	// have labels that already exist.  This all works, except for container, if using Service Discovery endpoint/pod
	// and the pod has multiple containers that expose ports this can result in potentially duplicate scrape jobs,
	// which would lead to duplicate metrics.  The configuration is to typically not keep a "container" label, as it
	// can cause duplicate scrapes and incorrect metric calculations for instances where a pod has multiple containers
	// and multiple ports even if a single port should be scraped.  However, for opencost dashboards/rules to work correctly,
	// this should be added, since it is not auto-generated and the container label returned from opencost is just "container"
	// we need to copy it
	rule {
		action        = "replace"
		source_labels = ["container"]
		regex         = "(.+)"
		replacement   = "$1"
		target_label  = "exported_container"
	}

	// opencost looks for an "app" label for dashboard population, based on the values from the metric kube_pod_labels
	// so there is something consistent, copy the first value from each of the following labels, and assign it to "app"
	rule {
		action        = "replace"
		source_labels = [
			"pod",
			"label_app",
			"label_app_kubernetes_io_name",
			"label_k8s_app",
		]
		separator    = ";"
		regex        = "^.*" + argument.pod_name.value + ".*;(?:;*)?([^;]+).*$"
		replacement  = "$1"
		target_label = "label_app"
	}

	// due to the fact it is easier to perform a keep and maintain a whitelist, we have to take a
	// multi-step approach since the metrics could be coming from any job, not just opencost:
	//
	// 1st apply a keep regex, changing the name of the metric to be preceded by __
	// 2nd drop anything matching opencost where the metric name starts with a alpha character
	// 3rd remove the temp __ added in the 1st step

	// add temp __ to metrics we want to keep
	rule {
		action        = "replace"
		source_labels = [
			"pod",
			"__name__",
		]
		separator    = ";"
		regex        = "(?i)^.*" + argument.pod_name.value + ".*;" + argument.keep_metrics.value
		replacement  = "__$1"
		target_label = "__name__"
	}

	// remove any metric from opencost that does not start with __
	rule {
		action        = "drop"
		source_labels = [
			"pod",
			"__name__",
		]
		separator = ";"
		regex     = "(?i)^.*" + argument.pod_name.value + ".*;[a-z]+.+"
	}

	// remove the __ from any remaining opencost
	rule {
		action        = "replace"
		source_labels = [
			"pod",
			"__name__",
		]
		separator    = ";"
		regex        = "(?i)^.*" + argument.pod_name.value + ".*;__(.+)"
		replacement  = "$1"
		target_label = "__name__"
	}

	// set the job label, only if job is not specified or contains "module.", the value of the annotation
	// metrics.agent.grafana.com/job takes precedence
	rule {
		action        = "replace"
		source_labels = [
			"pod",
			"job",
		]
		separator    = ";"
		regex        = "(?i)^.*" + argument.pod_name.value + "[^;]*;(.*module\\..*|)$"
		replacement  = argument.job_label.value
		target_label = "job"
	}
}

/*
Module: metrics-target-endpoints
Description: Performs Kubernetes service discovery for endpoints, applies relabelings
*/
argument "tenant" {
	// comment = "The tenant to write metrics to.  This does not have to be the tenantId, this is the value to look for in the logs.agent.grafana.com/tenant annotation, and this can be a regex."
	optional = true
	default  = ".*"
}

argument "scrape_port_named_metrics" {
	// comment = "Whether or not to automatically scrape endpoints that have a port with 'metrics' in the name"
	optional = true
	default  = false
}

argument "git_repo" {
	optional = true
	default  = coalesce(env("GIT_REPO"), "https://github.com/grafana/agent-modules.git")
}

argument "git_rev" {
	optional = true
	default  = coalesce(env("GIT_REV"), env("GIT_REVISION"), env("GIT_BRANCH"), "main")
}

argument "git_pull_freq" {
	optional = true
	default  = "5m"
}

export "relabelings" {
	value = discovery.relabel.pod_labels
}

// get the available endpoints
discovery.kubernetes "endpoints" {
	role = "endpoints"
}

// apply metric annotation relabelings
module.git "relabelings_annotations" {
	repository     = argument.git_repo.value
	revision       = argument.git_rev.value
	pull_frequency = argument.git_pull_freq.value
	path           = "modules/kubernetes/metrics/relabelings/annotations/metrics/endpoints.river"

	arguments {
		targets = discovery.kubernetes.endpoints.targets
	}
}

// drop any targets with __tmp_scrape = false
discovery.relabel "scrape_targets" {
	targets = module.git.relabelings_annotations.exports.relabelings.output

	// only keep targets where the pod is running or the pod_phase is empty, meaning the endpoint is not associated
	// to a pod, but rather a static IP or hostname, that could be outside of kubernetes// allow endpoints to declare what tenant their metrics should be written to, the following annotations are supported:
	rule {
		action        = "keep"
		source_labels = ["__meta_kubernetes_pod_phase"]
		regex         = "^(?i)(Running|)$"
	}

	rule {
		action        = "keep"
		source_labels = ["__meta_kubernetes_pod_ready"]
		regex         = "true"
	}

	// add a __tmp_scrape_port_named_metrics
	rule {
		replacement  = format("%t", argument.scrape_port_named_metrics.value)
		target_label = "__tmp_scrape_port_named_metrics"
	}

	// only keep endpoint targets that have scrape: true or "metrics" in the port name if the argument scrape_port_named_metrics
	rule {
		action        = "keep"
		source_labels = [
			"__tmp_scrape",
			"__tmp_scrape_port_named_metrics",
			"__meta_kubernetes_endpoint_port_name",
		]
		separator = ";"
		regex     = "^(true;.*|(|true);true;(.*metrics.*))$"
	}

	// allow endpoints to declare what tenant their metrics should be written to, the following annotations are supported:
	//   metrics.agent.grafana.com/tenant: "primary"
	rule {
		action        = "keep"
		source_labels = ["__tmp_tenant"]
		regex         = "^(" + argument.tenant.value + ")$"
	}

	// allow override of http scheme, both of the following annotations are supported:
	//   prometheus.io/scheme: http
	//   metrics.agent.grafana.com/scheme: http
	rule {
		action        = "replace"
		source_labels = ["__tmp_scheme"]
		target_label  = "__scheme__"
	}

	// allow endpoints to declare what port to collect metrics from, the following annotations are supported:
	//   metrics.agent.grafana.com/port: 9090
	//   prometheus.io/port: 9090
	rule {
		action        = "replace"
		source_labels = [
			"__address__",
			"__tmp_port",
		]
		separator    = ";"
		regex        = "^([^:]+)(?::\\d+)?;(\\d+)$"
		replacement  = "$1:$2"
		target_label = "__address__"
	}

	// allow endpoints to declare what path to collect metrics from, the following annotations are supported:
	//   metrics.agent.grafana.com/path: /metrics
	//   prometheus.io/path: /metrics
	rule {
		action        = "replace"
		source_labels = ["__tmp_path"]
		target_label  = "__metrics_path__"
	}

	// allow endpoints to declare how often to scrape metrics, the following annotations are supported:
	//   metrics.agent.grafana.com/interval: 5m
	//   prometheus.io/interval: 5m
	rule {
		action        = "replace"
		source_labels = ["__tmp_interval"]
		target_label  = "__scrape_interval__"
	}

	// allow endpoints to declare how long before a scrape times out, the following annotations are supported:
	//   metrics.agent.grafana.com/timeout: 30s
	//   prometheus.io/timeout: 30s
	rule {
		action        = "replace"
		source_labels = ["__tmp_timeout"]
		target_label  = "__scrape_timeout__"
	}
}

// apply common relabelings
module.git "relabelings_common" {
	repository     = argument.git_repo.value
	revision       = argument.git_rev.value
	pull_frequency = argument.git_pull_freq.value
	path           = "modules/kubernetes/relabelings/common.river"

	arguments {
		targets       = discovery.relabel.scrape_targets.output
		git_repo      = argument.git_repo.value
		git_rev       = argument.git_rev.value
		git_pull_freq = argument.git_pull_freq.value
	}
}

// apply common pod relabelings
// Endpoints are typically associated with a service and a pod, per the documentation, if the endpoint
// belongs to a service, make all of the service labels available, if the endpoints is backed by a pod
// make all of the pod labels available, so this relabeling will work for both endpoints and pods
module.git "relabelings_pod" {
	repository     = argument.git_repo.value
	revision       = argument.git_rev.value
	pull_frequency = argument.git_pull_freq.value
	path           = "modules/kubernetes/relabelings/pod.river"

	arguments {
		targets = module.git.relabelings_common.exports.relabelings.output
	}
}

// apply common service relabelings
module.git "relabelings_service" {
	repository     = argument.git_repo.value
	revision       = argument.git_rev.value
	pull_frequency = argument.git_pull_freq.value
	path           = "modules/kubernetes/relabelings/service.river"

	arguments {
		targets = module.git.relabelings_pod.exports.relabelings.output
	}
}

discovery.relabel "pod_labels" {
	targets = module.git.relabelings_service.exports.relabelings.output

	// if the container is an init container, drop it
	rule {
		action        = "drop"
		source_labels = ["__meta_kubernetes_pod_container_init"]
		regex         = "true"
	}

	// as this can result in duplicate scrapes of the same target because the labels are different
	// drop the container label
	rule {
		action = "labeldrop"
		regex  = "container"
	}

	// add a label for the port that is being scraped, separately from the the instance / __address__,
	// only if there is not a port label defined already
	rule {
		action        = "replace"
		source_labels = [
			"port",
			"__address__",
		]
		separator    = ";"
		regex        = "^;[^;:]+:(\\d+)"
		replacement  = "$1"
		target_label = "port"
	}
}

/*
Module: logs-from-worker
Description: Performs Kubernetes service discovery for pods, applies relabelings, discovers available files on the
             worker node, and uses these are source files for loki and parses the files using the cri stage.

             This requires the agent to deployed as a DaemonSet, as each pod will mount a volume to the worker
             node to retrieve the pod logs.
*/
argument "forward_to" {
	// comment = "The module to forward the output to"
	optional = false
}

argument "tenant" {
	// comment = "The tenant to filter logs to.  This does not have to be the tenantId, this is the value to look for in the logs.agent.grafana.com/tenant annotation, and this can be a regex."
	optional = true
	default  = ".*"
}

argument "git_repo" {
	optional = true
	default  = coalesce(env("GIT_REPO"), "https://github.com/grafana/agent-modules.git")
}

argument "git_rev" {
	optional = true
	default  = coalesce(env("GIT_REV"), env("GIT_REVISION"), env("GIT_BRANCH"), "main")
}

argument "git_pull_freq" {
	optional = true
	default  = "5m"
}

discovery.kubernetes "pods" {
	role = "pod"
}

module.git "relabelings_log" {
	repository     = argument.git_repo.value
	revision       = argument.git_rev.value
	pull_frequency = argument.git_pull_freq.value
	path           = "modules/kubernetes/logs/relabelings.river"

	arguments {
		targets       = discovery.kubernetes.pods.targets
		tenant        = argument.tenant.value
		git_repo      = argument.git_repo.value
		git_rev       = argument.git_rev.value
		git_pull_freq = argument.git_pull_freq.value
	}
}

// as a result of kubernetes service discovery for pods, all of the meta data information is exposed in labels
// __meta_kubernetes_pod_*, including __meta_kubernetes_pod_container_id which can be used to determine what
// the pods container runtime is, docker (docker://...) or containerd (containerd://...) this will inform us
// which parsing stage to use.  However, any labels that begin with __* are not passed to loki.process
// (pipeline) stages. Use a relabeling stage to set a label that can be used a LogQL selector in the stage
// below so parsing can be automatically determined, then drop the label from the loki.process stage.
discovery.relabel "container_runtime" {
	targets = module.git.relabelings_log.exports.relabelings.output

	// set the container runtime as a label
	rule {
		action        = "replace"
		source_labels = ["__meta_kubernetes_pod_container_id"]
		regex         = "^(\\w+):\\/\\/.+$"
		replacement   = "$1"
		target_label  = "tmp_container_runtime"
	}
}

local.file_match "pods" {
	path_targets = discovery.relabel.container_runtime.output
}

loki.source.file "pods" {
	targets    = local.file_match.pods.targets
	forward_to = [loki.process.parse.receiver]
}

loki.process "parse" {
	forward_to = [argument.forward_to.value]

	// if the label tmp_container_runtime from above is containerd parse using cri
	stage.match {
		selector = "{tmp_container_runtime=\"containerd\"}"
		// the cri processing stage extracts the following k/v pairs: log, stream, time, flags
		stage.cri { }

		// Set the extract flags and stream values as labels
		stage.labels {
			values = {
				flags  = "",
				stream = "",
			}
		}
	}

	// if the label tmp_container_runtime from above is docker parse using docker
	stage.match {
		selector = "{tmp_container_runtime=\"docker\"}"
		// the docker processing stage extracts the following k/v pairs: log, stream, time
		stage.docker { }

		// Set the extract stream value as a label
		stage.labels {
			values = {
				stream = "",
			}
		}
	}

	// drop the temporary container runtime label as it is no longer needed
	stage.label_drop {
		values = ["tmp_container_runtime"]
	}
}

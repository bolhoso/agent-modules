/*
Module: log-all
Description: Wrapper module to include all kubernetes logging modules and use cri parsing
*/

argument "loki_url" {
	// comment = "The full URL address of Loki including the protocol, host and path i.e. https://example.com/loki/api/v1/push"
	optional = false
}

argument "loki_username" {
	// comment = "The Loki Username / Tenant ID"
	optional = false
}

argument "loki_password" {
	// comment = "The Loki Password / Token for the Tenant"
	optional = true
	default  = ""
}

argument "tenant" {
	// comment = "The tenant to filter logs to.  This does not have to be the tenantId, this is the value to look for in the logs.agent.grafana.com/tenant annotation, and this can be a regex."
	optional = true
	default  = ".*"
}

argument "label_cluster" {
	// comment = "Static cluster label to add to all collected metrics"
	optional = true
	default  = ""
}

argument "label_env" {
	// comment = "Static env label to add to all collected metrics"
	optional = true
	default  = ""
}

argument "label_region" {
	// comment = "Static region label to add to all collected metrics"
	optional = true
	default  = ""
}

argument "keep_labels" {
	// comment = "List of labels to keep before the log message is written to Loki"
	optional = true
	default  = [
		"app",
		"cluster",
		"component",
		"container",
		"deployment",
		"env",
		"filename",
		"instance",
		"job",
		"level",
		"log_type",
		"namespace",
		"region",
		"service",
		"squad",
		"team",
	]
}

argument "git_repo" {
	optional = true
	default  = coalesce(env("GIT_REPO"), "https://github.com/grafana/agent-modules.git")
}

argument "git_rev" {
	optional = true
	default  = coalesce(env("GIT_REV"), env("GIT_REVISION"), env("GIT_BRANCH"), "main")
}

argument "git_pull_freq" {
	optional = true
	default  = "5m"
}

module.git "log_targets" {
	repository     = argument.git_repo.value
	revision       = argument.git_rev.value
	pull_frequency = argument.git_pull_freq.value
	path           = "modules/kubernetes/logs/targets/logs-from-worker.river"

	arguments {
		forward_to    = module.git.log_formats_all.exports.process.receiver
		tenant        = argument.tenant.value
		git_repo      = argument.git_repo.value
		git_rev       = argument.git_rev.value
		git_pull_freq = argument.git_pull_freq.value
	}
}

module.git "log_formats_all" {
	repository     = argument.git_repo.value
	revision       = argument.git_rev.value
	pull_frequency = argument.git_pull_freq.value
	path           = "modules/kubernetes/logs/log-formats/all.river"

	arguments {
		forward_to    = module.git.log_level_default.exports.process.receiver
		git_repo      = argument.git_repo.value
		git_rev       = argument.git_rev.value
		git_pull_freq = argument.git_pull_freq.value
	}
}

module.git "log_level_default" {
	repository     = argument.git_repo.value
	revision       = argument.git_rev.value
	pull_frequency = argument.git_pull_freq.value
	path           = "modules/kubernetes/logs/labels/log-level.river"

	arguments {
		forward_to = module.git.drop_levels.exports.process.receiver
	}
}

module.git "drop_levels" {
	repository     = argument.git_repo.value
	revision       = argument.git_rev.value
	pull_frequency = argument.git_pull_freq.value
	path           = "modules/kubernetes/logs/drops/levels.river"

	arguments {
		forward_to    = module.git.scrub_all.exports.process.receiver
		git_repo      = argument.git_repo.value
		git_rev       = argument.git_rev.value
		git_pull_freq = argument.git_pull_freq.value
	}
}

module.git "scrub_all" {
	repository     = argument.git_repo.value
	revision       = argument.git_rev.value
	pull_frequency = argument.git_pull_freq.value
	path           = "modules/kubernetes/logs/scrubs/all.river"

	arguments {
		forward_to    = module.git.embed_pod.exports.process.receiver
		git_repo      = argument.git_repo.value
		git_rev       = argument.git_rev.value
		git_pull_freq = argument.git_pull_freq.value
	}
}

module.git "embed_pod" {
	repository     = argument.git_repo.value
	revision       = argument.git_rev.value
	pull_frequency = argument.git_pull_freq.value
	path           = "modules/kubernetes/logs/embed/pod.river"

	arguments {
		forward_to = module.git.mask_all.exports.process.receiver
	}
}

module.git "mask_all" {
	repository     = argument.git_repo.value
	revision       = argument.git_rev.value
	pull_frequency = argument.git_pull_freq.value
	path           = "modules/kubernetes/logs/masks/all.river"

	arguments {
		forward_to    = module.git.label_normalize_filename.exports.process.receiver
		git_repo      = argument.git_repo.value
		git_rev       = argument.git_rev.value
		git_pull_freq = argument.git_pull_freq.value
	}
}

module.git "label_normalize_filename" {
	repository     = argument.git_repo.value
	revision       = argument.git_rev.value
	pull_frequency = argument.git_pull_freq.value
	path           = "modules/kubernetes/logs/labels/normalize-filename.river"

	arguments {
		forward_to = module.git.label_keep.exports.process.receiver
	}
}

module.git "label_keep" {
	repository     = argument.git_repo.value
	revision       = argument.git_rev.value
	pull_frequency = argument.git_pull_freq.value
	path           = "modules/kubernetes/logs/labels/keep-labels.river"

	arguments {
		forward_to  = loki.write.destination.receiver
		keep_labels = argument.keep_labels.value
	}
}

loki.write "destination" {
	endpoint {
		url = argument.loki_url.value

		basic_auth {
			username = argument.loki_username.value
			password = argument.loki_password.value
		}
	}

	external_labels = {
		"cluster" = argument.label_cluster.value,
		"env"     = argument.label_env.value,
		"region"  = argument.label_region.value,
	}
}
